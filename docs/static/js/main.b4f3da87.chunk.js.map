{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakePart","map","part","i","style","left","top","className","key","getRandomFood","Math","floor","random","initialState","food","speed","derection","App","state","onKeyDown","e","window","event","keyCode","setState","move","head","length","push","shift","setInterval","this","document","onkeydown","ifOutBorder","ifCollapse","ifEat","gameOver","snake","pop","forEach","incSnake","newSnake","unshift","alert","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4f3da87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakePart.map((part, i) => {\r\n        const style = {\r\n          left: `${part[0]}%`,\r\n          top: `${part[1]}%`,\r\n        };\r\n        return <div className=\"snakePart\" key={i} style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const style = {\r\n    left: `${props.part[0]}%`,\r\n    top: `${props.part[1]}%`,\r\n  };\r\n  return <div className=\"food\" style={style}></div>;\r\n};\r\n","import React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomFood = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomFood(),\n  speed: 200,\n  derection: \"RIGHT\",\n  snakePart: [\n    [0, 0],\n    [2, 0],\n  ],\n};\n\nclass App extends Component {\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.move, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.ifOutBorder();\n    this.ifCollapse();\n    this.ifEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({ derection: \"UP\" });\n        break;\n      case 40:\n        this.setState({ derection: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ derection: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ derection: \"RIGHT\" });\n        break;\n    }\n  };\n\n  move = () => {\n    let part = [...this.state.snakePart];\n    let head = part[part.length - 1];\n\n    switch (this.state.derection) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    part.push(head);\n    part.shift();\n    this.setState({\n      snakePart: part,\n    });\n  };\n\n  ifOutBorder() {\n    let head = this.state.snakePart[this.state.snakePart.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  ifCollapse() {\n    let snake = [...this.state.snakePart];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((part) => {\n      if (head[0] === part[0] && head[1] === part[1]) {\n        this.gameOver();\n      }\n    });\n  }\n\n  ifEat() {\n    let head = this.state.snakePart[this.state.snakePart.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomFood(),\n      });\n      this.incSnake();\n      // this.incSpeed();\n    }\n  }\n\n  incSnake() {\n    let newSnake = [...this.state.snakePart];\n    newSnake.unshift([]);\n    this.setState({\n      snakePart: newSnake,\n    });\n  }\n\n  // incSpeed() {\n  //   if (this.state.speed > 50) {\n  //     return this.state.speed - 100;\n  //   }\n  // }\n\n  gameOver() {\n    alert(`Game Over, snake lenght is: ${this.state.snakePart.length}`);\n    this.setState(initialState);\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <Snake snakePart={this.state.snakePart} />\n        <Food part={this.state.food} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}